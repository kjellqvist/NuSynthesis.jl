var documenterSearchIndex = {"docs":
[{"location":"intro/#NuSynthesis","page":"Home","title":"NuSynthesis","text":"","category":"section"},{"location":"intro/","page":"Home","title":"Home","text":"A Julia package for reproducing and experimenting with the results from the article nu-Analysis: A new notion of robustness for large systems with structured uncertainties. https://arxiv.org/abs/2204.05359 ","category":"page"},{"location":"intro/#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"intro/","page":"Home","title":"Home","text":"using Pkg;\nPkg.add(url=\"https://github.com/kjellqvist/NuSynthesis.jl\")","category":"page"},{"location":"intro/","page":"Home","title":"Home","text":"and activate the environment by running","category":"page"},{"location":"intro/","page":"Home","title":"Home","text":"Pkg.activate(\"NuSynthesis\")","category":"page"},{"location":"examples/#Recrating-numerical-results","page":"Examples","title":"Recrating numerical results","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here we show how to recreate the results from the article.","category":"page"},{"location":"examples/#2\\times-2-matrices","page":"Examples","title":"2times 2-matrices","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This compares mu nu and bar nu for 2 times 2-matrices.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using LinearAlgebra\nusing Plots\n\nfunction nu(A::AbstractMatrix)\n    if maximum(diag(A)) == maximum(A)\n        return maximum(A)\n    end\n    w = A[2,1]\n    Anormalized = A / w\n\n    return w * det(Anormalized) / (sum(diag(Anormalized)) - 2)\nend\nnubar(A) = max(A[1,1], A[2,2], sqrt(A[1,2] * A[2,1]))\nspectralradius(A) = maximum(eigvals(A))\n\nN = 1000\nnubar_by_nu = zeros(N)\nmu_by_nu = zeros(N)\nfor n=1:N\n    random_numbers = rand(3)\n    A = [random_numbers[1] random_numbers[2]; random_numbers[2] random_numbers[3]]\n    nubar_by_nu[n] = nubar(A) / nu(A)\n    mu_by_nu[n] = spectralradius(A) / nu(A)\nend\n\np = scatter(nubar_by_nu, mu_by_nu)\nsavefig(p, \"scatter.png\"); nothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Simulations","page":"Examples","title":"Simulations","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The simulations in the paper are run with the following parameters.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"    maxN = 8\n    Niter = 10000\n    Nexpsp = 500\n    θs = Vector(0.2:0.1:.9)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The below code recreates the plots, but with a lighter set of parameters.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using NuSynthesis\nusing GLPK\nusing Plots\nPlots.scalefontsizes(2)\n\nmaxN = 6\nNas = 2 .^(1:maxN)\nNiter = 10000\nNexps = 20\nθs = Vector(0.2:0.1:.9)\ndata, dstatistics = gen_data(maxN, Niter, Nexps, θs, GLPK.Optimizer)\n\ntolerance = 1e-3\np = plot(yaxis = \"N\", legend = :bottomright, color_palette = palette(:Blues_9), size = (600, 400))\n\nplot!(p)\n\nfor θ ∈ θs[1:end]\n    plot!(p, Nas, (Na) -> first_until_tol(Na, θ, tolerance, dstatistics), \n    label = false, xaxis = \"Na\", linewidth = 2, marker = :x, markersize = 5)\nend\nsavefig(p, \"fix_tol.png\")\n\nNa = 2^maxN\np = plot(yaxis = \"N\", xaxis = \"tolerance\", color_palette = palette(:Blues_9), size = (600, 400))\nplot!(p, xaxis = :log, yaxis = :log, xflip = true, legend = :topleft)\n\nfor θ ∈ θs[1:end]\n    plot!(p, 10 .^(1 .- (0:0.01:4)), (tolerance) -> first_until_tol(Na, θ, tolerance, dstatistics), \n    label = false,  linewidth = 2)\nend\np\nsavefig(p, \"fix_Na.png\"); nothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: ) (Image: )","category":"page"},{"location":"","page":"API","title":"API","text":"CurrentModule = NuSynthesis","category":"page"},{"location":"#NuSynthesis","page":"API","title":"NuSynthesis","text":"","category":"section"},{"location":"","page":"API","title":"API","text":"Documentation for NuSynthesis.","category":"page"},{"location":"","page":"API","title":"API","text":"","category":"page"},{"location":"","page":"API","title":"API","text":"Modules = [NuSynthesis]","category":"page"},{"location":"#NuSynthesis.first_until_tol-NTuple{4, Any}","page":"API","title":"NuSynthesis.first_until_tol","text":"ind = first_until_tol(Na, θ, tol, dstatistics)\n\nComputes the first index for which the worst relative error is smaller than tol.\n\ndstatistics is a directory containing statistics.  The index is returned for the experiment concerning Na x Na matrices with nubar_conv run with interpolation parameter θ.\n\n\n\n\n\n","category":"method"},{"location":"#NuSynthesis.gen_data-NTuple{5, Any}","page":"API","title":"NuSynthesis.gen_data","text":"(data, dstatistics) = gen_data(maxN, Niter, Nexps, θs, optimizationfactory)\n\nComputes the relative tolerance of ar  u for randomly generated matrices using nubar_heuristic.\n\nExample\n\nThe results in the article were generated using the following bit of code.\n\nusing GLPK\nmaxN = 8                    # Runs experiments for square 2^1n x 2^n matrices, for n = 1:maxN.\nNiter = 10000               # Runs nubar_heuristic with 10000 iterations\nNexps = 500                 # Generates 500 random examples per matrix size\nθs = Vector(0.2:0.1:.9)     # Runs nubar_heuristic with θ = 0.2, 0.3, ..., 0.9\n\ndata, dstatistics = gen_data(maxN, Niter, Nexps, θs, GLPK.Optimizer)\n\n\n\n\n\n","category":"method"},{"location":"#NuSynthesis.get_statistics","page":"API","title":"NuSynthesis.get_statistics","text":"(ubound, means, stds) = get_statistics(experiment::Matrix{Float64}, tol=1e-8)\n\nComputes the maximum, mean and standard deviation of the relative error of a batch of experiments.\n\nexperiment is a matrix where the first column contains the true values of bar nu for each experiment. Column n + 1 contains the values of the nth iteration of the heuristic algorithm. The relative error of an estimate hat nu of bar nu is defined as hat nu  bar nu + texttol.\n\n\n\n\n\n","category":"function"},{"location":"#NuSynthesis.nubar_conv-Tuple{Matrix{Float64}, Any}","page":"API","title":"NuSynthesis.nubar_conv","text":"(d, γ) = nubar_conv(A::Matrix{Float64}, optimizationfactory)\n\nComputes the weigths and cost for a square matrix A using linear programming.\n\nExample\n\nusing Hypatia\nA = [1. 2.; 3. 4.]\n(d, cost) = nubar_conv(A, Hypatia.Optimizer)\n\n\n\n\n\n\n","category":"method"},{"location":"#NuSynthesis.nubar_heuristic-Tuple{Matrix{Float64}, Int64, Float64}","page":"API","title":"NuSynthesis.nubar_heuristic","text":"(ds, costs) = nubar_heuristic(A::Matrix{Float64}, N::Int64, θ::Float64)\n\nCalculates and the balancing weights and the costs using the heuristic Algorithm.\n\nHere, A is a square matrix, N is the number of iterations and 0 < θ < 1 is the interpolation parameter.\n\nExample\n\nA = [1. 2.; 3. 4.]\n(ds, costs) = nubar_heuristic(A, 10, 0.5)\n\n\n\n\n\n\n","category":"method"},{"location":"#NuSynthesis.run_experiments-Tuple{Int64, Int64, Int64, Vector{Float64}, Any}","page":"API","title":"NuSynthesis.run_experiments","text":"experiments = run_experiments(Na::Int64, Niter::Int64, Nexps::Int64, θs::Vector{Float64}, optimizationfactory)\n\nComputes the costs for randomly generated matrices for the heuristic algorithm and the LP.\n\nRuns nubar_conv and nubar_heuristic for Nexps randomly generate Na x Na-matrices. nubar_conv is run for Niter iterations for each θ ∈ θs.\n\n\n\n\n\n","category":"method"}]
}
